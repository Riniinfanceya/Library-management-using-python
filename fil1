from datetime import datetime, timedelta


class Book:
    def __init__(self, title, author, isbn):
        self.title = title
        self.author = author
        self.isbn = isbn
        self.is_available = True

    def __str__(self):
        return f"{self.title} by {self.author} (ISBN: {self.isbn})"


class User:
    def __init__(self, name, user_id):
        self.name = name
        self.user_id = user_id
        self.borrowed_books = {}

    def borrow_book(self, book):
        if book.is_available:
            due_date = datetime.now() + timedelta(days=14)
            self.borrowed_books[book] = due_date
            book.is_available = False
            print(f"{self.name} borrowed {book.title}. Due date: {due_date.strftime('%Y-%m-%d')}.")
        else:
            print(f"Sorry, {book.title} is not available.")

    def return_book(self, book):
        if book in self.borrowed_books:
            del self.borrowed_books[book]
            book.is_available = True
            print(f"{self.name} returned {book.title}.")
        else:
            print(f"{self.name} did not borrow {book.title}.")

    def list_borrowed_books(self):
        if not self.borrowed_books:
            print(f"{self.name} has no borrowed books.")
        else:
            print(f"{self.name}'s borrowed books:")
            for book, due_date in self.borrowed_books.items():
                print(f"{book} - Due date: {due_date.strftime('%Y-%m-%d')}")


class Library:
    def __init__(self):
        self.books = []
        self.users = []

    def add_book(self, title, author, isbn):
        new_book = Book(title, author, isbn)
        self.books.append(new_book)
        print(f"Added {new_book} to the library.")

    def register_user(self, name, user_id):
        new_user = User(name, user_id)
        self.users.append(new_user)
        print(f"Registered user: {new_user.name}.")

    def find_book(self, title):
        for book in self.books:
            if book.title.lower() == title.lower():
                return book
        return None

    def list_books(self):
        print("Available books:")
        for book in self.books:
            status = "Available" if book.is_available else "Checked out"
            print(f"{book} - {status}")

    def search_books(self, query):
        results = [book for book in self.books if query.lower() in book.title.lower() or query.lower() in book.author.lower()]
        if results:
            print("Search results:")
            for book in results:
                print(book)
        else:
            print("No books found.")

    def check_overdue_books(self):
        print("Checking for overdue books...")
        for user in self.users:
            for book, due_date in user.borrowed_books.items():
                if due_date < datetime.now():
                    print(f"Overdue: {book} borrowed by {user.name}. Due date: {due_date.strftime('%Y-%m-%d')}.")


def main():
    library = Library()

    # Sample data
    library.add_book("The Great Gatsby", "F. Scott Fitzgerald", "9780743273565")
    library.add_book("1984", "George Orwell", "9780451524935")
    library.register_user("Alice", "U001")
    library.register_user("Bob", "U002")

    while True:
        print("\n1. List Books")
        print("2. Borrow Book")
        print("3. Return Book")
        print("4. Register User")
        print("5. Search Books")
        print("6. List Borrowed Books")
        print("7. Check Overdue Books")
        print("8. Exit")
        choice = input("Choose an option: ")

        if choice == "1":
            library.list_books()
        elif choice == "2":
            user_id = input("Enter user ID: ")
            title = input("Enter book title: ")
            user = next((u for u in library.users if u.user_id == user_id), None)
            book = library.find_book(title)
            if user and book:
                user.borrow_book(book)
            else:
                print("User or book not found.")
        elif choice == "3":
            user_id = input("Enter user ID: ")
            title = input("Enter book title: ")
            user = next((u for u in library.users if u.user_id == user_id), None)
            book = library.find_book(title)
            if user and book:
                user.return_book(book)
            else:
                print("User or book not found.")
        elif choice == "4":
            name = input("Enter user name: ")
            user_id = input("Enter user ID: ")
            library.register_user(name, user_id)
        elif choice == "5":
            query = input("Enter book title or author to search: ")
            library.search_books(query)
        elif choice == "6":
            user_id = input("Enter user ID: ")
            user = next((u for u in library.users if u.user_id == user_id), None)
            if user:
                user.list_borrowed_books()
            else:
                print("User not found.")
        elif choice == "7":
            library.check_overdue_books()
        elif choice == "8":
            break
        else:
            print("Invalid option. Please try again.")


if __name__ == "__main__":
    main()
